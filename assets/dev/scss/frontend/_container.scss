.e-container {
	// Set to initial values in order to avoid inheritance which might cause unexpected behavior.
	--border-radius: 0;
	--display: flex;
	--flex-basis: auto;
	--width: var( --container-max-width, 1140px ); // Use the width from `Site Settings` or default to 1140px.
	--min-height: initial;
	--height: auto;
	--text-align: initial;
	--margin: 0;
	--padding: 0;
	--position: relative;
	--z-index: auto;
	--overflow: visible;
	--transition: 0;

	--overlay-mix-blend-mode: initial;
	--overlay-opacity: 1;
	--overlay-transition: 0;

	position: var( --position );
	display: var( --display );
	text-align: var( --text-align );
	flex: 1 1 var( --flex-basis );
	width: var( --width );
	// Set `min-width` to fix nested Containers shrink bug (ED-4964).
	// Ref: https://stackoverflow.com/questions/43934648/how-to-make-flexbox-items-shrink-correctly-when-in-a-nested-container
	min-width: 0;
	// Use the `min()` function to fix cases when a top-level Container is 100% width due to `max-width: 100%;`,
	// or cases when a nested Container overflows the parent Container due to `max-width: 1140px;`.
	// Capital `M` in order to use the CSS function and not the SCSS one.
	max-width: Min( 100%, var( --width ) );
	min-height: var( --min-height );
	height: var( --height );
	border-radius: var( --border-radius );
	margin: var( --margin );
	padding: var( --padding );
	z-index: var( --z-index );
	overflow: var( --overflow );
	transition: var( --transition );

	// Force center only top-level containers.
	.elementor-section-wrap > & {
		margin-right: auto;
		margin-left: auto;
	}

	.elementor-empty-view {
		position: relative;
		width: 100%;
		height: 100%;
		// Use the Container's `min-height` or default to 100px.
		min-height: var( --min-height, 100px );

		.elementor-first-add {
			width: auto;
			height: auto;
			inset: 0;
		}
	}

	&.e-container--placeholder-row > .elementor-widget-placeholder {
		width: 10px;
		align-self: stretch;
		height: auto;
		min-height: 100%;
		flex-shrink: 0;
		animation-name: dnd-placeholder-widget-vertical;
	}

	// Hack to increase specificity and avoid using `!important`.
	.elementor-widget.elementor-widget {
		// Override the default margin-bottom of widgets.
		margin-bottom: 0;
	}

	// Background overlay.
	&::before {
		// Render the background overlay only if it's being used - Determined by passing a CSS var from the background
		// control with an empty string (e.g. `--background-overlay: '';`).
		content: var( --background-overlay );
		display: block;
		position: absolute;
		z-index: 0;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		mix-blend-mode: var( --overlay-mix-blend-mode );
		opacity: var( --overlay-opacity );
		transition: var( --overlay-transition );
		border-radius: var( --border-radius );
	}

	// Inner Container handle.
	// TODO: Find a better solution.
	& > & {
		> .elementor-element-overlay {
			// Hide any setting control which isn't the edit control.
			.elementor-editor-element-setting {
				&:not( .elementor-editor-element-edit ),
				&:first-child::before {
					display: none;
				}
			}

			.elementor-editor-element-edit {
				width: auto;

				&:hover {
					background-color: transparent;
				}
			}

			.elementor-editor-element-settings {
				inset: initial;
				transform: none;
				inset-inline-start: 0;
				top: 0;
				border-radius: 0;
				border-end-end-radius: 3px;
				height: auto;
				background-color: $editor-darkest;

				&:hover {
					background-color: $editor-darker;
				}

				// Replace the edit eicon with Container eicon.
				i::before {
					content: '\e98d'; // Container eicon.
					font-size: 10px;
					display: block;
					padding: 7px;
				}
			}
		}
	}
}

@keyframes dnd-placeholder-widget-vertical {
	0% {
		width: 0;
		opacity: 0;
	}
	100% {
		width: 10px;
		opacity: .9;
	}
}
