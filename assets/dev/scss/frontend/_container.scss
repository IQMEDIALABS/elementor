.e-container {
	// Set to initial values in order to avoid inheritance which might cause unexpected behavior.
	--border-radius: 0;
	--display: flex;
	--flex-direction: column;
	--flex-basis: auto;
	--flex-grow: 0;
	--flex-shrink: 1;
	// Use the width from `Site Settings` or default to 1140px.
	// Take the smaller value in order to fix bug ED-6712 where the content-width (AKA "padding hack", see below)
	// isn't working properly.
	--content-width: Min( 100%, var( --container-max-width, 1140px ) );
	--width: 100%;
	--min-height: initial;
	--height: auto;
	--text-align: initial;
	--margin-top: 0;
	--margin-right: 0;
	--margin-bottom: 0;
	--margin-left: 0;
	--padding-top: var( --container-default-padding-top, 10px );
	--padding-right: var( --container-default-padding-right, 10px );
	--padding-bottom: var( --container-default-padding-bottom, 10px );
	--padding-left: var( --container-default-padding-left, 10px );
	--position: relative;
	--z-index: revert;
	--overflow: visible;
	--transition: 0;
	--gap: var( --widgets-spacing, 20px ); // Use the gap from `Site Settings` or default to 20px.

	--overlay-mix-blend-mode: initial;
	--overlay-opacity: 1;
	--overlay-transition: 0.3s;

	position: var( --position );
	display: var( --display );
	text-align: var( --text-align );
	flex-direction: var( --flex-direction );
	flex: var( --flex-grow ) var( --flex-shrink ) var( --flex-basis );
	width: var( --width );
	// Set `min-width` to fix nested Containers shrink bug (ED-4964).
	// Ref: https://stackoverflow.com/questions/43934648/how-to-make-flexbox-items-shrink-correctly-when-in-a-nested-container
	min-width: 0;
	min-height: var( --min-height );
	height: var( --height );
	border-radius: var( --border-radius );
	margin: var( --margin-top ) var( --margin-right ) var( --margin-bottom ) var( --margin-left );
	// Custom content-width hack.
	padding-left: Max( var( --padding-left ), calc( ( 100% - var( --content-width ) ) / 2 ) );
	padding-right: Max( var( --padding-right ), calc( ( 100% - var( --content-width ) ) / 2 ) );
	padding-top: var( --padding-top );
	padding-bottom: var( --padding-bottom );
	z-index: var( --z-index );
	overflow: var( --overflow );
	transition: var( --transition );

	:is( .elementor-section-wrap, [data-elementor-id] ) > & {
		// Default top-level containers to be centered.
		--margin-right: auto;
		--margin-left: auto;

		// Use the `min()` function to fix cases when a top-level Container is 100% width due to `max-width: 100%;`,
		// or cases when a nested Container overflows the parent Container due to `max-width: 1140px;`.
		// Capital `M` in order to use the CSS function and not the SCSS one.
		max-width: Min( 100%, var( --width ) );
	}

	// Hack to increase specificity and avoid using `!important`.
	.elementor-widget.elementor-widget {
		// Override the default margin-bottom of widgets.
		margin-bottom: 0;
	}

	// Background overlay.
	&::before {
		// Render the background overlay only if it's being used - Determined by passing a CSS var from the background
		// control with an empty string (e.g. `--background-overlay: '';`).
		content: var( --background-overlay );
		display: block;
		position: absolute;
		z-index: $ground-layer;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		mix-blend-mode: var( --overlay-mix-blend-mode );
		opacity: var( --overlay-opacity );
		transition: var( --overlay-transition );
		border-radius: var( --border-radius );
	}

	.elementor-background-video-container,
	.elementor-background-slideshow {
		z-index: $under-layer;
	}

	.elementor-widget {
		// Fix swiper-based widgets (ED-6716).
		// Since the default is `min-width: auto` for flex items.
		min-width: 0;

		// Fix iframe-based widgets (ED-5338).
		// TODO: Find a better solution.
		&-video,
		&-google_maps {
			flex-basis: 100%;
		}

		// Fix swiper-based widgets broken (ED-6849).
		// TODO: Use `:has( .swiper-container )` selector when available && remove this class from `frontend/utils/swiper.js`.
		&.e-widget-swiper {
			max-width: 100%;
			flex-basis: 100%;
		}
	}

	& > .elementor-widget {

		& > .elementor-widget-container {
			// Fix align-self:stretch (ED-7359)
			height: 100%;
		}
	}

	// Hack to increase specificity and avoid using `!important`.
	.elementor .elementor-section-wrap & {

		// This was done to make sure that the widgets inside containers do not exceed the container's max width.
		& > .elementor-widget {
			max-width: 100%;
		}
	}
}

@media ( max-width: $editor-screen-sm-max ) {
	.e-container {
		--width: 100%;
		--flex-wrap: wrap;
	}
}

@keyframes dnd-placeholder-widget-vertical {
	0% {
		transform-origin: 0 50%;
		transform: translateX( 50% ) scaleX( 0 );
		opacity: 0;
	}

	100% {
		transform-origin: 0 50%;
		transform: translateX( 50% ) scaleX( 1 );
		opacity: .9;
	}
}

@keyframes dnd-placeholder-widget-horizontal {
	0% {
		transform-origin: 50% 0;
		transform: scaleY( 0 );
		opacity: 0;
	}

	100% {
		transform-origin: 50% 0;
		transform: scaleY( 1 );
		opacity: .9;
	}
}
