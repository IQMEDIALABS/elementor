name: Increment Patch Version 
description: If a GA release already exists, the patch version should be incremented by 1.

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
          # Get the latest version
          current_package_version=$(node -p "require('./package.json').version")
          major_minor=$(echo "$current_package_version" | cut -d'.' -f1-2)

          # !/-rc/ replaces grep -v "\-rc". It excludes any lines containing the substring "-rc".
          # !/refs\/tags\/v/ replaces grep -v "refs/tags/v". It excludes any lines containing the substring "refs/tags/v".
          # !/beta/ replaces grep -v "beta". It excludes any lines containing the substring "beta".
          # !/dev/ replaces grep -v "dev". It excludes any lines containing the substring "dev".
          # !/cloud/ replaces grep -v "cloud". It excludes any lines containing the substring "cloud".
          # /[0-9]+\.[0-9]+\.[0-9]+$/ replaces grep "[0-9]\+\.[0-9]\+\.[0-9]\+$". It matches lines that end with a string in the format "x.y.z" where x, y, and z are one or more digits.
          # $0 ~ major_minor replaces grep "$major_minor". It matches lines that contain the value of the major_minor variable.

          latest_ga_version=$(git ls-remote --tags | awk '!/-rc/ && !/refs\/tags\/v/ && !/beta/ && !/dev/ && !/cloud/ && /[0-9]+\.[0-9]+\.[0-9]+$/ && $0 ~ major_minor {print $0}' | awk -F/ '{print $3}' | sort -rV | head -n 1)

          # Exit with status code 0 if no latest version is found
          if [ -z "$latest_ga_version" ]; then
            exit 0
          fi

          # Extract major, minor and patch versions
          major=$(echo $latest_ga_version | awk -F. '{print $1}')
          minor=$(echo $latest_ga_version | awk -F. '{print $2}')
          patch=$(echo $latest_ga_version | awk -F. '{print $3}')

          # Increment patch version by 1
          patch=$(($patch + 1))

          # Generate the updated version number
          updated_version="${major}.${minor}.${patch}"

          PACKAGE_VERSION=${updated_version}-ga-rc

          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "CLEAN_PACKAGE_VERSION=${updated_version}" >> $GITHUB_ENV

