name: Bi Weekley Release
description: Count the number of days since the last automatic release and set it as an environment variable.
inputs:
  CHANNEL:
    required: true
    description: "The channel to get the version to (cloud, CCU)."
  LAST_RELEASE_DATE:
    required: false
    description: "The date of the last release."

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        # echo EVENT_NAME=${github.event_name}
        echo CHANNEL=${{ inputs.CHANNEL }} >> $GITHUB_ENV
        echo LAST_RELEASE_DATE=${{ inputs.LAST_RELEASE_DATE }} >> $GITHUB_ENV

        if [[ -z ${{ inputs.LAST_RELEASE_DATE }} ]]; then
          LAST_RELEASE_DATE=date +"%D"
          echo LAST_RELEASE_DATE=${LAST_RELEASE_DATE} >> $GITHUB_ENV
        fi

        echo LAST_RELEASE_DATE=${LAST_RELEASE_DATE} >> $GITHUB_ENV

        # add this condition in before releasing to production // github.event_name == "schedule"
        # So thats thi action will run only on automated runs.
        # In order to release to production every 2 weeks, we need to check if the last release was 14 days ago.
        # If it was, we will set the LAST_RELEASE_DATE to today's date and release to production.
        # If it wasn't, we will exit the action and not release to production.

        if [[ ${{ inputs.CHANNEL }} == "cloud" ]]; then
          DAYS_SINCE_LAST_RELEASE=$(echo $(( ($(date +%s) - $(date -d $LAST_RELEASE_DATE +%s)) / 86400 )))
          echo "DAYS_SINCE_LAST_RELEASE=${DAYS_SINCE_LAST_RELEASE}" >> $GITHUB_ENV

          if [[ $DAYS_SINCE_LAST_RELEASE % 14 == 0 ]]; then
             echo "LAST_RELEASE_DATE=date +"%D" >> $GITHUB_ENV

          else
            exit 0
          fi
        fi
