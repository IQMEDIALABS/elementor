// Inspired by "Dependency Extraction Webpack Plugin" by @wordpress team.
// Link: https://github.com/WordPress/gutenberg/tree/trunk/packages/dependency-extraction-webpack-plugin

const { sources: { RawSource } } = require( 'webpack' );
const fs = require( 'fs' );
const path = require( 'path' );

module.exports = class ExtractDependenciesWebpackPlugin {
	constructor( {
		handlePrefix,
		i18n,
	} = {} ) {
		if ( ! handlePrefix ) {
			throw new Error( 'handlePrefix is required in Webpack.config' );
		}

		this.handlePrefix = handlePrefix;
		this.i18n = i18n;
	}

	apply( compiler ) {
		compiler.hooks.thisCompilation.tap( this.constructor.name, ( compilation ) => {
			compilation.hooks.processAssets.tap( { name: this.constructor.name }, () => {
				const handlesAssetsMap = [ ...compilation.entrypoints ].reduce( ( map, [ entryName, entrypoint ] ) => {
					const chunk = entrypoint.chunks.find( ( { name } ) => name === entryName );
					const chunkJSFile = this.getFileFromChunk( chunk );

					if ( ! chunkJSFile ) {
						return map;
					}

					const rootFolderPath = compilation.options.context;
					const entryFolderPath = entrypoint.origins[ 0 ].request;
					const packageJsonPath = this.findPackageJsonPath( entryFolderPath, rootFolderPath );

					if ( ! packageJsonPath ) {
						return map;
					}

					const packageJsonData = require( packageJsonPath );

					const deps = this.getDepsFromChunk( compilation, chunk );

					const assetFilename = this.generateAssetsFileName(
						compilation.getPath( '[file]', { filename: chunkJSFile } )
					);

					const handle = this.generateHandleName( entryName );

					map[ handle ] = assetFilename;

					const content = this.createAssetsFileContent( {
						deps,
						entryName,
						i18n: this.i18n,
						type: packageJsonData.elementor?.type,
					} );

					// Add source and file into compilation for webpack to output.
					compilation.assets[ assetFilename ] = new RawSource( content );

					chunk.files.add( assetFilename );

					return map;
				}, {} );

				const loaderFileContent = this.getLoaderFileContent( handlesAssetsMap );

				compilation.emitAsset(
					'loader.php',
					new RawSource( loaderFileContent )
				);
			} );
		} );
	}

	findPackageJsonPath( baseFolder, topLevelFolder ) {
		const packageJsonPath = path.resolve( baseFolder, 'package.json' );

		if ( fs.existsSync( packageJsonPath ) ) {
			return packageJsonPath;
		}

		const parentFolder = path.resolve( baseFolder, '..' );

		if ( parentFolder === topLevelFolder ) {
			return null;
		}

		return this.findPackageJsonPath( parentFolder, topLevelFolder );
	}

	getLoaderFileContent( entriesData ) {
		const entriesContent = Object.entries( entriesData ).map( ( [ handle, assetFileName ] ) => {
			return `
	$data['${ handle }'] = require __DIR__ . '/${ assetFileName }';`;
		} );

		return `<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * This file is generated by Webpack, do not edit it directly.
 */

add_filter( 'elementor/packages/config', function( $data ) {
${ entriesContent.join( '\n' ) }

	return $data;
} );
`;
	}

	getDepsFromChunk( compilation, chunk ) {
		const externals = Object.keys( compilation.options.externals );
		const depsSet = new Set();

		compilation.chunkGraph.getChunkModules( chunk ).forEach( ( module ) => {
			[ ...( module.modules || [] ), module ].forEach( ( subModule ) => {
				const isExternalDep = externals.includes( subModule.userRequest );

				if ( ! isExternalDep ) {
					return;
				}

				depsSet.add( subModule.userRequest );
			} );
		} );

		return depsSet;
	}

	createAssetsFileContent( { deps, i18n, type, entryName } ) {
		const handleName = this.generateHandleName( entryName );

		const depsAsString = [ ...deps ]
			.map( ( dep ) => this.replaceDependencyNames( dep ) )
			.filter( ( dep ) => dep !== handleName )
			.sort()
			.map( ( dep ) => `'${ dep }',` )
			.join( '\n\t\t' );

		const i18nContent = i18n ? `[
		'domain' => '${ i18n.domain }',
		'replace_requested_file' => ${ ( i18n.replaceRequestedFile ?? false ).toString() },
	]` : '[]';

		const content =
`<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * This file is generated by Webpack, do not edit it directly.
 */

return [
	'handle' => '${ handleName }',
	'src' => plugins_url( '/', __FILE__ ) . '${ entryName }{{MIN_SUFFIX}}.js',
	'i18n' => ${ i18nContent },
	'type' => ${ type ? `'${ type }'` : 'null' },
	'deps' => [
		${ depsAsString }
	],
];
`;

		return content;
	}

	getFileFromChunk( chunk ) {
		return [ ...chunk.files ].find( ( f ) => /\.js$/i.test( f ) );
	}

	replaceDependencyNames( name ) {
		const map = new Map( [
			[ '@elementor/', 'elementor-packages-' ],
			[ '@wordpress/', 'wp-' ],
		] );

		for ( const [ key, value ] of map ) {
			if ( name.startsWith( key ) ) {
				return name.replace( key, value );
			}
		}

		return name;
	}

	generateAssetsFileName( filename ) {
		return filename.replace( /(\.min)?\.js$/i, '.asset.php' );
	}

	generateHandleName( name ) {
		return `${ this.handlePrefix }-${ name }`;
	}
};
